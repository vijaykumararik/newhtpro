{"ast":null,"code":"var _jsxFileName = \"E:\\\\SCOPE COMPANY\\\\firestproject-main\\\\frontend\\\\src\\\\components\\\\Allevents.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// function Allevents() {\n//   const title = useRef();\n//   const description = useRef();\n//   const images = useRef();\n//   const [events, setEvents] = useState([]);\n//   const [error, setError] = useState('');\n\n//     const [eventUpdate, setEventUpdate] = useState(null);\n//   const [newImages, setNewImages] = useState([]);\n// // featch details\n// useEffect(()=>{\n//   fetch(\"http://localhost:4000/getevents\")\n//   .then((res=>res.json()))\n//   .then((data)=>{\n//     setEvents(data)\n//     console.log(data);\n//     let allimages=data.images\n//     console.log(allimages);\n//   })\n//   .catch ((error)=> {\n//     console.log(error);\n//     setError('Failed to fetch events');\n//   })\n// },[])\n//   const addImages = (e) => {\n//     e.preventDefault();\n//     const files = images.current.files;\n//     const maxImages = 15;\n//     const selectedImages = Array.from(files).slice(0, maxImages);\n//     // let newarr=selectedImages.map((m)=>{\n//     //   return m.name\n//     // })\n//     // console.log(newarr);\n//     // setNewImages(newarr);\n//     setNewImages(selectedImages)\n//     console.log(selectedImages);\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const newEvent = {\n//       title: title.current.value,\n//       description: description.current.value,\n//       images: newImages,\n//     };\n//     console.log(newEvent);\n\n//     fetch('http://localhost:4000/events', {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(newEvent),\n//     })\n//       .then(() => {\n//         setEventUpdate('New event added successfully');\n//       })\n//       .catch(() => {\n//         setEventUpdate('Failed to add event. Please try again.');\n//       });\n//   };\n\n//   return (\n//     <>\n//     <img src=\"\" alt=\"\" />\n//     <div className=\"addevents\">\n//       <h4>Add new event here</h4>\n//       <form onSubmit={handleSubmit}>\n//         <input type=\"text\" placeholder=\"Enter title\" ref={title} />\n//         <input type=\"text\" placeholder=\"Enter description\" ref={description} />\n//         <input   type=\"file\" accept=\"image/*\" multiple ref={images}  />\n//         <button onClick={addImages}>Add Images</button>\n//         <input type=\"submit\" value=\"Submit\" />\n//         {eventUpdate && <h2 style={{ color: 'green' }}>{eventUpdate}</h2>}\n//       </form>\n//     </div>\n//     <div className=\"displayevnts\">\n//     <h4>All Events</h4>\n//       {events.map((event) => (\n//         <div key={event._id}>\n//           <h5>{event.title}</h5>\n//           <p>{event.description}</p>\n//           <ul>\n//           {event.images.map((image, index) => (\n//         <img\n//           key={index}\n//           src={URL.createObjectURL(image)}\n//           alt={`Image ${index + 1}`}\n//         />\n//       ))}\n//           </ul>\n//         </div>\n//       ))}\n//       {error && <p>{error}</p>}\n\n//     </div>\n//     </>\n\n//   );\n// }\n\n// export default Allevents;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Allevents() {\n  _s();\n  const title = useRef();\n  const description = useRef();\n  const images = useRef();\n  const [events, setEvents] = useState([]);\n  const [error, setError] = useState('');\n  const [eventUpdate, setEventUpdate] = useState(null);\n  const [newImages, setNewImages] = useState([]);\n\n  // Fetch details\n  useEffect(() => {\n    fetch('http://localhost:4000/events').then(res => res.json()).then(data => {\n      setEvents(data);\n      console.log(data);\n    }).catch(error => {\n      console.log(error);\n      setError('Failed to fetch events');\n    });\n  }, []);\n  const addImages = e => {\n    e.preventDefault();\n    const files = images.current.files;\n    const maxImages = 15;\n    const selectedImages = Array.from(files).slice(0, maxImages);\n    setNewImages(selectedImages);\n    console.log(selectedImages);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newEvent = {\n      title: title.current.value,\n      description: description.current.value,\n      images: newImages\n    };\n    console.log(newEvent);\n    fetch('http://localhost:4000/events', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newEvent)\n    }).then(() => {\n      setEventUpdate('New event added successfully');\n    }).catch(() => {\n      setEventUpdate('Failed to add event. Please try again.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addevents\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Add new event here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter title\",\n          ref: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter description\",\n          ref: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          multiple: true,\n          ref: images\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addImages,\n          children: \"Add Images\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), eventUpdate && /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            color: 'green'\n          },\n          children: eventUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"displayevnts\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"All Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: event.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: event.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: event.images && event.images.length > 0 ? event.images.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://localhost:4000/${image}` // Assuming images are served from the server\n            ,\n            alt: `Image ${index + 1}`\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No images\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, event._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Allevents, \"A8wN7NBv9l7H11yWCl5On6ZpYZM=\");\n_c = Allevents;\nexport default Allevents;\nvar _c;\n$RefreshReg$(_c, \"Allevents\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Allevents","title","description","images","events","setEvents","error","setError","eventUpdate","setEventUpdate","newImages","setNewImages","fetch","then","res","json","data","console","log","catch","addImages","e","preventDefault","files","current","maxImages","selectedImages","Array","from","slice","handleSubmit","newEvent","value","method","headers","body","JSON","stringify","color","map","event","length","image","index","_id"],"sources":["E:/SCOPE COMPANY/firestproject-main/frontend/src/components/Allevents.jsx"],"sourcesContent":["\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// function Allevents() {\r\n//   const title = useRef();\r\n//   const description = useRef();\r\n//   const images = useRef();\r\n//   const [events, setEvents] = useState([]);\r\n//   const [error, setError] = useState('');\r\n  \r\n//     const [eventUpdate, setEventUpdate] = useState(null);\r\n//   const [newImages, setNewImages] = useState([]);\r\n// // featch details\r\n// useEffect(()=>{\r\n//   fetch(\"http://localhost:4000/getevents\")\r\n//   .then((res=>res.json()))\r\n//   .then((data)=>{\r\n//     setEvents(data)\r\n//     console.log(data);\r\n//     let allimages=data.images\r\n//     console.log(allimages);\r\n//   })\r\n//   .catch ((error)=> {\r\n//     console.log(error);\r\n//     setError('Failed to fetch events');\r\n//   })\r\n// },[])\r\n//   const addImages = (e) => {\r\n//     e.preventDefault();\r\n//     const files = images.current.files;\r\n//     const maxImages = 15;\r\n//     const selectedImages = Array.from(files).slice(0, maxImages);\r\n//     // let newarr=selectedImages.map((m)=>{\r\n//     //   return m.name\r\n//     // })\r\n//     // console.log(newarr);\r\n//     // setNewImages(newarr);\r\n//     setNewImages(selectedImages)\r\n//     console.log(selectedImages);\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     const newEvent = {\r\n//       title: title.current.value,\r\n//       description: description.current.value,\r\n//       images: newImages,\r\n//     };\r\n//     console.log(newEvent);\r\n\r\n//     fetch('http://localhost:4000/events', {\r\n//       method: 'POST',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify(newEvent),\r\n//     })\r\n//       .then(() => {\r\n//         setEventUpdate('New event added successfully');\r\n//       })\r\n//       .catch(() => {\r\n//         setEventUpdate('Failed to add event. Please try again.');\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//     <img src=\"\" alt=\"\" />\r\n//     <div className=\"addevents\">\r\n//       <h4>Add new event here</h4>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input type=\"text\" placeholder=\"Enter title\" ref={title} />\r\n//         <input type=\"text\" placeholder=\"Enter description\" ref={description} />\r\n//         <input   type=\"file\" accept=\"image/*\" multiple ref={images}  />\r\n//         <button onClick={addImages}>Add Images</button>\r\n//         <input type=\"submit\" value=\"Submit\" />\r\n//         {eventUpdate && <h2 style={{ color: 'green' }}>{eventUpdate}</h2>}\r\n//       </form>\r\n//     </div>\r\n//     <div className=\"displayevnts\">\r\n//     <h4>All Events</h4>\r\n//       {events.map((event) => (\r\n//         <div key={event._id}>\r\n//           <h5>{event.title}</h5>\r\n//           <p>{event.description}</p>\r\n//           <ul>\r\n//           {event.images.map((image, index) => (\r\n//         <img\r\n//           key={index}\r\n//           src={URL.createObjectURL(image)}\r\n//           alt={`Image ${index + 1}`}\r\n//         />\r\n//       ))}\r\n//           </ul>\r\n//         </div>\r\n//       ))}\r\n//       {error && <p>{error}</p>}\r\n    \r\n\r\n//     </div>\r\n//     </>\r\n\r\n//   );\r\n// }\r\n\r\n// export default Allevents;\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\nfunction Allevents() {\r\n  const title = useRef();\r\n  const description = useRef();\r\n  const images = useRef();\r\n  const [events, setEvents] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  const [eventUpdate, setEventUpdate] = useState(null);\r\n  const [newImages, setNewImages] = useState([]);\r\n\r\n  // Fetch details\r\n  useEffect(() => {\r\n    fetch('http://localhost:4000/events')\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setEvents(data);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setError('Failed to fetch events');\r\n      });\r\n  }, []);\r\n\r\n  const addImages = (e) => {\r\n    e.preventDefault();\r\n    const files = images.current.files;\r\n    const maxImages = 15;\r\n    const selectedImages = Array.from(files).slice(0, maxImages);\r\n    setNewImages(selectedImages);\r\n    console.log(selectedImages);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newEvent = {\r\n      title: title.current.value,\r\n      description: description.current.value,\r\n      images: newImages,\r\n    };\r\n    console.log(newEvent);\r\n\r\n    fetch('http://localhost:4000/events', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(newEvent),\r\n    })\r\n      .then(() => {\r\n        setEventUpdate('New event added successfully');\r\n      })\r\n      .catch(() => {\r\n        setEventUpdate('Failed to add event. Please try again.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <img src=\"\" alt=\"\" />\r\n      <div className=\"addevents\">\r\n        <h4>Add new event here</h4>\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"text\" placeholder=\"Enter title\" ref={title} />\r\n          <input type=\"text\" placeholder=\"Enter description\" ref={description} />\r\n          <input type=\"file\" accept=\"image/*\" multiple ref={images} />\r\n          <button onClick={addImages}>Add Images</button>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n          {eventUpdate && <h2 style={{ color: 'green' }}>{eventUpdate}</h2>}\r\n        </form>\r\n      </div>\r\n      <div className=\"displayevnts\">\r\n        <h4>All Events</h4>\r\n        {events.map((event) => (\r\n          <div key={event._id}>\r\n            <h5>{event.title}</h5>\r\n            <p>{event.description}</p>\r\n            <ul>\r\n              {event.images && event.images.length > 0 ? (\r\n                event.images.map((image, index) => (\r\n                  <img\r\n                    key={index}\r\n                    src={`http://localhost:4000/${image}`} // Assuming images are served from the server\r\n                    alt={`Image ${index + 1}`}\r\n                  />\r\n                ))\r\n              ) : (\r\n                <p>No images</p>\r\n              )}\r\n            </ul>\r\n          </div>\r\n        ))}\r\n        {error && <p>{error}</p>}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Allevents;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}