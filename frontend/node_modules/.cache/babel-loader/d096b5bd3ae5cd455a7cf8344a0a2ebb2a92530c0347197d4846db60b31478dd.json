{"ast":null,"code":"var _jsxFileName = \"E:\\\\SCOPE COMPANY\\\\firestproject-main\\\\frontend\\\\src\\\\components\\\\Allevents.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Allevents() {\n  _s();\n  let title = useRef();\n  let discription = useRef();\n  let images = useRef();\n  let [eventupdate, setEventupdate] = useState(null);\n  let [newimage, setNewimage] = useState([]);\n  const addimage = e => {\n    e.preventDefault();\n    var input = images;\n    var files = input.files;\n    var maxImages = 15;\n    var selectedImages = Array.from(files).slice(0, maxImages);\n    ;\n    console.log(selectedImages);\n    // newimage=newimage.push(images)\n    // setNewimage(newimage)\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let newEvent = {\n      title: title.current.value,\n      discription: discription.current.value,\n      images: newimage\n    };\n    fetch(\"http://localhost:4000/events\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newEvent)\n    }).then(() => {\n      setEventupdate(\"New evented add sucessfully added\");\n    }).catch(setEventupdate(\"Not able to add event try agin\"));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addevents\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Add new event here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter title\",\n        ref: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter discription\",\n        ref: discription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"image-input\",\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        ref: images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"submit-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), eventupdate && /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: 'green'\n        },\n        children: eventupdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Allevents, \"wXcMgWIPZm97ewdJVgWNQ8CYGPQ=\");\n_c = Allevents;\nexport default Allevents;\nvar _c;\n$RefreshReg$(_c, \"Allevents\");","map":{"version":3,"names":["React","useRef","useState","Allevents","title","discription","images","eventupdate","setEventupdate","newimage","setNewimage","addimage","e","preventDefault","input","files","maxImages","selectedImages","Array","from","slice","console","log","handleSubmit","newEvent","current","value","fetch","method","headers","body","JSON","stringify","then","catch","color"],"sources":["E:/SCOPE COMPANY/firestproject-main/frontend/src/components/Allevents.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\r\n\r\nfunction Allevents() {\r\n    let title=useRef()\r\n    let discription=useRef()\r\n    let images=useRef()\r\n    let [eventupdate,setEventupdate]=useState(null)\r\n    let [newimage,setNewimage]=useState([])\r\n    const addimage=(e)=>{\r\n      e.preventDefault();\r\n      var input = images;\r\n      var files = input.files;\r\n      var maxImages=15;\r\n  \r\n      var selectedImages = Array.from(files).slice(0, maxImages);;\r\n      console.log(selectedImages);\r\n      // newimage=newimage.push(images)\r\n      // setNewimage(newimage)\r\n   }\r\n    const handleSubmit=(e)=>{\r\n      e.preventDefault();\r\n      let  newEvent={\r\n            title:title.current.value,\r\n            discription:discription.current.value,\r\n            images:newimage,\r\n        }\r\n       \r\n        fetch(\"http://localhost:4000/events\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(newEvent)})\r\n        .then(\r\n           ()=>{\r\n            setEventupdate(\"New evented add sucessfully added\")\r\n           }\r\n            \r\n        ).catch(\r\n            setEventupdate(\"Not able to add event try agin\")\r\n        )\r\n    }\r\n  return (\r\n    <div className=\"addevents\">\r\n      <h4>Add new event here</h4>\r\n    <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" placeholder='Enter title' ref={title}/>\r\n        <input type=\"text\" placeholder='Enter discription' ref={discription}/>\r\n        <input id=\"image-input\" type=\"file\" accept=\"image/*\" multiple ref={images} />\r\n        <button id=\"submit-button\" >Submit</button>\r\n        <input type=\"submit\" /> \r\n        { eventupdate &&  <h2 style={{color:'green'}} >{eventupdate}</h2> }\r\n        \r\n    </form>\r\n    \r\n</div>\r\n  )\r\n}\r\n\r\nexport default Allevents"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAA;AAE/C,SAASC,SAAS,GAAG;EAAA;EACjB,IAAIC,KAAK,GAACH,MAAM,EAAE;EAClB,IAAII,WAAW,GAACJ,MAAM,EAAE;EACxB,IAAIK,MAAM,GAACL,MAAM,EAAE;EACnB,IAAI,CAACM,WAAW,EAACC,cAAc,CAAC,GAACN,QAAQ,CAAC,IAAI,CAAC;EAC/C,IAAI,CAACO,QAAQ,EAACC,WAAW,CAAC,GAACR,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAMS,QAAQ,GAAEC,CAAC,IAAG;IAClBA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAIC,KAAK,GAAGR,MAAM;IAClB,IAAIS,KAAK,GAAGD,KAAK,CAACC,KAAK;IACvB,IAAIC,SAAS,GAAC,EAAE;IAEhB,IAAIC,cAAc,GAAGC,KAAK,CAACC,IAAI,CAACJ,KAAK,CAAC,CAACK,KAAK,CAAC,CAAC,EAAEJ,SAAS,CAAC;IAAC;IAC3DK,OAAO,CAACC,GAAG,CAACL,cAAc,CAAC;IAC3B;IACA;EACH,CAAC;;EACA,MAAMM,YAAY,GAAEX,CAAC,IAAG;IACtBA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAKW,QAAQ,GAAC;MACRpB,KAAK,EAACA,KAAK,CAACqB,OAAO,CAACC,KAAK;MACzBrB,WAAW,EAACA,WAAW,CAACoB,OAAO,CAACC,KAAK;MACrCpB,MAAM,EAACG;IACX,CAAC;IAEDkB,KAAK,CAAC,8BAA8B,EAAC;MAACC,MAAM,EAAC,MAAM;MAACC,OAAO,EAAC;QAAC,cAAc,EAAC;MAAkB,CAAC;MAACC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACR,QAAQ;IAAC,CAAC,CAAC,CAC9HS,IAAI,CACF,MAAI;MACHzB,cAAc,CAAC,mCAAmC,CAAC;IACpD,CAAC,CAEH,CAAC0B,KAAK,CACH1B,cAAc,CAAC,gCAAgC,CAAC,CACnD;EACL,CAAC;EACH,oBACE;IAAK,SAAS,EAAC,WAAW;IAAA,wBACxB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA2B,eAC7B;MAAM,QAAQ,EAAEe,YAAa;MAAA,wBACzB;QAAO,IAAI,EAAC,MAAM;QAAC,WAAW,EAAC,aAAa;QAAC,GAAG,EAAEnB;MAAM;QAAA;QAAA;QAAA;MAAA,QAAE,eAC1D;QAAO,IAAI,EAAC,MAAM;QAAC,WAAW,EAAC,mBAAmB;QAAC,GAAG,EAAEC;MAAY;QAAA;QAAA;QAAA;MAAA,QAAE,eACtE;QAAO,EAAE,EAAC,aAAa;QAAC,IAAI,EAAC,MAAM;QAAC,MAAM,EAAC,SAAS;QAAC,QAAQ;QAAC,GAAG,EAAEC;MAAO;QAAA;QAAA;QAAA;MAAA,QAAG,eAC7E;QAAQ,EAAE,EAAC,eAAe;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiB,eAC3C;QAAO,IAAI,EAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAG,EACrBC,WAAW,iBAAK;QAAI,KAAK,EAAE;UAAC4B,KAAK,EAAC;QAAO,CAAE;QAAA,UAAG5B;MAAW;QAAA;QAAA;QAAA;MAAA,QAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QAE9D;EAAA;IAAA;IAAA;IAAA;EAAA,QAEL;AAEN;AAAC,GAlDQJ,SAAS;AAAA,KAATA,SAAS;AAoDlB,eAAeA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}