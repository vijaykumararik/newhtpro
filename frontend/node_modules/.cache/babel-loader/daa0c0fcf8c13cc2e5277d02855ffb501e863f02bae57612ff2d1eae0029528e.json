{"ast":null,"code":"var _jsxFileName = \"E:\\\\SCOPE COMPANY\\\\firestproject-main\\\\frontend\\\\src\\\\components\\\\Allevents.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// function Allevents() {\n//   const title = useRef();\n//   const description = useRef();\n//   const images = useRef();\n//   const [events, setEvents] = useState([]);\n//   const [error, setError] = useState('');\n\n//     const [eventUpdate, setEventUpdate] = useState(null);\n//   const [newImages, setNewImages] = useState([]);\n// // featch details\n// useEffect(()=>{\n//   fetch(\"http://localhost:4000/getevents\")\n//   .then((res=>res.json()))\n//   .then((data)=>{\n//     setEvents(data)\n//     console.log(data);\n//     let allimages=data.images\n//     console.log(allimages);\n//   })\n//   .catch ((error)=> {\n//     console.log(error);\n//     setError('Failed to fetch events');\n//   })\n// },[])\n//   const addImages = (e) => {\n//     e.preventDefault();\n//     const files = images.current.files;\n//     const maxImages = 15;\n//     const selectedImages = Array.from(files).slice(0, maxImages);\n//     // let newarr=selectedImages.map((m)=>{\n//     //   return m.name\n//     // })\n//     // console.log(newarr);\n//     // setNewImages(newarr);\n//     setNewImages(selectedImages)\n//     console.log(selectedImages);\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const newEvent = {\n//       title: title.current.value,\n//       description: description.current.value,\n//       images: newImages,\n//     };\n//     console.log(newEvent);\n\n//     fetch('http://localhost:4000/events', {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify(newEvent),\n//     })\n//       .then(() => {\n//         setEventUpdate('New event added successfully');\n//       })\n//       .catch(() => {\n//         setEventUpdate('Failed to add event. Please try again.');\n//       });\n//   };\n\n//   return (\n//     <>\n//     <img src=\"\" alt=\"\" />\n//     <div className=\"addevents\">\n//       <h4>Add new event here</h4>\n//       <form onSubmit={handleSubmit}>\n//         <input type=\"text\" placeholder=\"Enter title\" ref={title} />\n//         <input type=\"text\" placeholder=\"Enter description\" ref={description} />\n//         <input   type=\"file\" accept=\"image/*\" multiple ref={images}  />\n//         <button onClick={addImages}>Add Images</button>\n//         <input type=\"submit\" value=\"Submit\" />\n//         {eventUpdate && <h2 style={{ color: 'green' }}>{eventUpdate}</h2>}\n//       </form>\n//     </div>\n//     <div className=\"displayevnts\">\n//     <h4>All Events</h4>\n//       {events.map((event) => (\n//         <div key={event._id}>\n//           <h5>{event.title}</h5>\n//           <p>{event.description}</p>\n//           <ul>\n//           {event.images.map((image, index) => (\n//         <img\n//           key={index}\n//           src={URL.createObjectURL(image)}\n//           alt={`Image ${index + 1}`}\n//         />\n//       ))}\n//           </ul>\n//         </div>\n//       ))}\n//       {error && <p>{error}</p>}\n\n//     </div>\n//     </>\n\n//   );\n// }\n\n// export default Allevents;\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Allevents() {\n  _s();\n  const titleRef = useRef();\n  const descriptionRef = useRef();\n  const imagesRef = useRef();\n  const [events, setEvents] = useState([]);\n  const [error, setError] = useState('');\n  const [eventUpdate, setEventUpdate] = useState(null);\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get('http://localhost:4000/getevents');\n      setEvents(response.data);\n    } catch (error) {\n      console.log(error);\n      setError('Failed to fetch events');\n    }\n  };\n  const addImages = () => {\n    const files = Array.from(imagesRef.current.files).slice(0, 15);\n    const fileArray = files.map(file => URL.createObjectURL(file));\n    setEvents(prevEvents => [...prevEvents, ...fileArray]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const title = titleRef.current.value;\n    const description = descriptionRef.current.value;\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('description', description);\n    Array.from(imagesRef.current.files).slice(0, 15).forEach(file => {\n      formData.append('images', file);\n    });\n    try {\n      await axios.post('http://localhost:4000/events', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setEventUpdate('New event added successfully');\n      fetchEvents();\n    } catch (error) {\n      console.log(error);\n      setEventUpdate('Failed to add event. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addevents\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Add new event here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter title\",\n          ref: titleRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter description\",\n          ref: descriptionRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          multiple: true,\n          ref: imagesRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addImages,\n          children: \"Add Images\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), eventUpdate && /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            color: 'green'\n          },\n          children: eventUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"displayevents\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"All Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), events.map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: event.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: event.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), event.images.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: `Image ${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Allevents, \"yAASEy1UD+D3T4Si1lPLM02KGhw=\");\n_c = Allevents;\nexport default Allevents;\nvar _c;\n$RefreshReg$(_c, \"Allevents\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","Allevents","titleRef","descriptionRef","imagesRef","events","setEvents","error","setError","eventUpdate","setEventUpdate","fetchEvents","response","get","data","console","log","addImages","files","Array","from","current","slice","fileArray","map","file","URL","createObjectURL","prevEvents","handleSubmit","e","preventDefault","title","value","description","formData","FormData","append","forEach","post","headers","color","event","index","images","image"],"sources":["E:/SCOPE COMPANY/firestproject-main/frontend/src/components/Allevents.jsx"],"sourcesContent":["\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// function Allevents() {\r\n//   const title = useRef();\r\n//   const description = useRef();\r\n//   const images = useRef();\r\n//   const [events, setEvents] = useState([]);\r\n//   const [error, setError] = useState('');\r\n  \r\n//     const [eventUpdate, setEventUpdate] = useState(null);\r\n//   const [newImages, setNewImages] = useState([]);\r\n// // featch details\r\n// useEffect(()=>{\r\n//   fetch(\"http://localhost:4000/getevents\")\r\n//   .then((res=>res.json()))\r\n//   .then((data)=>{\r\n//     setEvents(data)\r\n//     console.log(data);\r\n//     let allimages=data.images\r\n//     console.log(allimages);\r\n//   })\r\n//   .catch ((error)=> {\r\n//     console.log(error);\r\n//     setError('Failed to fetch events');\r\n//   })\r\n// },[])\r\n//   const addImages = (e) => {\r\n//     e.preventDefault();\r\n//     const files = images.current.files;\r\n//     const maxImages = 15;\r\n//     const selectedImages = Array.from(files).slice(0, maxImages);\r\n//     // let newarr=selectedImages.map((m)=>{\r\n//     //   return m.name\r\n//     // })\r\n//     // console.log(newarr);\r\n//     // setNewImages(newarr);\r\n//     setNewImages(selectedImages)\r\n//     console.log(selectedImages);\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     const newEvent = {\r\n//       title: title.current.value,\r\n//       description: description.current.value,\r\n//       images: newImages,\r\n//     };\r\n//     console.log(newEvent);\r\n\r\n//     fetch('http://localhost:4000/events', {\r\n//       method: 'POST',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify(newEvent),\r\n//     })\r\n//       .then(() => {\r\n//         setEventUpdate('New event added successfully');\r\n//       })\r\n//       .catch(() => {\r\n//         setEventUpdate('Failed to add event. Please try again.');\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//     <img src=\"\" alt=\"\" />\r\n//     <div className=\"addevents\">\r\n//       <h4>Add new event here</h4>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <input type=\"text\" placeholder=\"Enter title\" ref={title} />\r\n//         <input type=\"text\" placeholder=\"Enter description\" ref={description} />\r\n//         <input   type=\"file\" accept=\"image/*\" multiple ref={images}  />\r\n//         <button onClick={addImages}>Add Images</button>\r\n//         <input type=\"submit\" value=\"Submit\" />\r\n//         {eventUpdate && <h2 style={{ color: 'green' }}>{eventUpdate}</h2>}\r\n//       </form>\r\n//     </div>\r\n//     <div className=\"displayevnts\">\r\n//     <h4>All Events</h4>\r\n//       {events.map((event) => (\r\n//         <div key={event._id}>\r\n//           <h5>{event.title}</h5>\r\n//           <p>{event.description}</p>\r\n//           <ul>\r\n//           {event.images.map((image, index) => (\r\n//         <img\r\n//           key={index}\r\n//           src={URL.createObjectURL(image)}\r\n//           alt={`Image ${index + 1}`}\r\n//         />\r\n//       ))}\r\n//           </ul>\r\n//         </div>\r\n//       ))}\r\n//       {error && <p>{error}</p>}\r\n    \r\n\r\n//     </div>\r\n//     </>\r\n\r\n//   );\r\n// }\r\n\r\n// export default Allevents;\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Allevents() {\r\n  const titleRef = useRef();\r\n  const descriptionRef = useRef();\r\n  const imagesRef = useRef();\r\n  const [events, setEvents] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [eventUpdate, setEventUpdate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  const fetchEvents = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:4000/getevents');\r\n      setEvents(response.data);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setError('Failed to fetch events');\r\n    }\r\n  };\r\n\r\n  const addImages = () => {\r\n    const files = Array.from(imagesRef.current.files).slice(0, 15);\r\n    const fileArray = files.map((file) => URL.createObjectURL(file));\r\n    setEvents((prevEvents) => [...prevEvents, ...fileArray]);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const title = titleRef.current.value;\r\n    const description = descriptionRef.current.value;\r\n    const formData = new FormData();\r\n\r\n    formData.append('title', title);\r\n    formData.append('description', description);\r\n    Array.from(imagesRef.current.files).slice(0, 15).forEach((file) => {\r\n      formData.append('images', file);\r\n    });\r\n\r\n    try {\r\n      await axios.post('http://localhost:4000/events', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      setEventUpdate('New event added successfully');\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.log(error);\r\n      setEventUpdate('Failed to add event. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"addevents\">\r\n        <h4>Add new event here</h4>\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"text\" placeholder=\"Enter title\" ref={titleRef} />\r\n          <input type=\"text\" placeholder=\"Enter description\" ref={descriptionRef} />\r\n          <input type=\"file\" accept=\"image/*\" multiple ref={imagesRef} />\r\n          <button type=\"button\" onClick={addImages}>\r\n            Add Images\r\n          </button>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n          {eventUpdate && <h2 style={{ color: 'green' }}>{eventUpdate}</h2>}\r\n        </form>\r\n      </div>\r\n      <div className=\"displayevents\">\r\n        <h4>All Events</h4>\r\n        {events.map((event, index) => (\r\n          <div key={index}>\r\n            <h5>{event.title}</h5>\r\n            <p>{event.description}</p>\r\n            {event.images.map((image, index) => (\r\n              <img key={index} src={image} alt={`Image ${index + 1}`} />\r\n            ))}\r\n          </div>\r\n        ))}\r\n        {error && <p>{error}</p>}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Allevents;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}