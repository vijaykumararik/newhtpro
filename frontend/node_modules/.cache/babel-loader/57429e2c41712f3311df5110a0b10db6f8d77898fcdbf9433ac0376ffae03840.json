{"ast":null,"code":"var _jsxFileName = \"E:\\\\SCOPE COMPANY\\\\firestproject-main\\\\frontend\\\\src\\\\components\\\\Allevents.jsx\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState } from 'react'\n\n// function Allevents() {\n//     let title=useRef()\n//     let discription=useRef()\n//     let images=useRef()\n//     let [eventupdate,setEventupdate]=useState(null)\n//     let [newimage,setNewimage]=useState([])\n//     const addimage=(e)=>{\n//       e.preventDefault();\n\n//       var files = images.current.value.files;\n//       console.log(images.current.value);\n//       var maxImages=15;\n\n//       var selectedImages = Array.from(files).slice(0, maxImages);;\n//       console.log(selectedImages);\n//       // newimage=newimage.push(images)\n//       // setNewimage(newimage)\n//    }\n//     const handleSubmit=(e)=>{\n//       e.preventDefault();\n//       let  newEvent={\n//             title:title.current.value,\n//             discription:discription.current.value,\n//             images:newimage,\n//         }\n\n//         fetch(\"http://localhost:4000/events\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(newEvent)})\n//         .then(\n//            ()=>{\n//             setEventupdate(\"New evented add sucessfully added\")\n//            }\n\n//         ).catch(\n//             setEventupdate(\"Not able to add event try agin\")\n//         )\n//     }\n//   return (\n//     <div className=\"addevents\">\n//       <h4>Add new event here</h4>\n//     <form onSubmit={handleSubmit}>\n//         <input type=\"text\" placeholder='Enter title' ref={title}/>\n//         <input type=\"text\" placeholder='Enter discription' ref={discription}/>\n//         <input id=\"image-input\" type=\"file\" accept=\"image/*\" multiple ref={images} />\n//         <button id=\"submit-button\" onClick={addimage}>Submit</button>\n//         <input type=\"submit\" /> \n//         { eventupdate &&  <h2 style={{color:'green'}} >{eventupdate}</h2> }\n\n//     </form>\n\n// </div>\n//   )\n// }\n\n// export default Allevents\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Allevents() {\n  _s();\n  const title = useRef();\n  const description = useRef();\n  const images = useRef();\n  const [eventUpdate, setEventUpdate] = useState(null);\n  const [newImages, setNewImages] = useState([]);\n  const addImages = e => {\n    e.preventDefault();\n    const files = images.current.files;\n    const maxImages = 15;\n    const selectedImages = Array.from(files).slice(0, maxImages);\n    //  selectedImages=selectedImages.map((m)=>{ return m.name})\n    // console.log(selectedImages[0].name);\n    for (let i = 0; i < selectedImages.length; i++) console.log(selectedImages);\n    setNewImages(selectedImages);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newEvent = {\n      title: title.current.value,\n      description: description.current.value,\n      images: newImages\n    };\n    fetch('http://localhost:4000/events', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newEvent)\n    }).then(() => {\n      setEventUpdate('New event added successfully');\n    }).catch(() => {\n      setEventUpdate('Failed to add event. Please try again.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addevents\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Add new event here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter title\",\n        ref: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter description\",\n        ref: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"image-input\",\n        type: \"file\",\n        accept: \"image/*\",\n        multiple: true,\n        ref: images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addImages,\n        children: \"Add Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), eventUpdate && /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: 'green'\n        },\n        children: eventUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(Allevents, \"iAkPCYyeAdrH7wFV7APL5L/plWo=\");\n_c = Allevents;\nexport default Allevents;\nvar _c;\n$RefreshReg$(_c, \"Allevents\");","map":{"version":3,"names":["React","useRef","useState","Allevents","title","description","images","eventUpdate","setEventUpdate","newImages","setNewImages","addImages","e","preventDefault","files","current","maxImages","selectedImages","Array","from","slice","i","length","console","log","handleSubmit","newEvent","value","fetch","method","headers","body","JSON","stringify","then","catch","color"],"sources":["E:/SCOPE COMPANY/firestproject-main/frontend/src/components/Allevents.jsx"],"sourcesContent":["// import React, { useRef, useState } from 'react'\r\n\r\n// function Allevents() {\r\n//     let title=useRef()\r\n//     let discription=useRef()\r\n//     let images=useRef()\r\n//     let [eventupdate,setEventupdate]=useState(null)\r\n//     let [newimage,setNewimage]=useState([])\r\n//     const addimage=(e)=>{\r\n//       e.preventDefault();\r\n     \r\n//       var files = images.current.value.files;\r\n//       console.log(images.current.value);\r\n//       var maxImages=15;\r\n  \r\n//       var selectedImages = Array.from(files).slice(0, maxImages);;\r\n//       console.log(selectedImages);\r\n//       // newimage=newimage.push(images)\r\n//       // setNewimage(newimage)\r\n//    }\r\n//     const handleSubmit=(e)=>{\r\n//       e.preventDefault();\r\n//       let  newEvent={\r\n//             title:title.current.value,\r\n//             discription:discription.current.value,\r\n//             images:newimage,\r\n//         }\r\n       \r\n//         fetch(\"http://localhost:4000/events\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(newEvent)})\r\n//         .then(\r\n//            ()=>{\r\n//             setEventupdate(\"New evented add sucessfully added\")\r\n//            }\r\n            \r\n//         ).catch(\r\n//             setEventupdate(\"Not able to add event try agin\")\r\n//         )\r\n//     }\r\n//   return (\r\n//     <div className=\"addevents\">\r\n//       <h4>Add new event here</h4>\r\n//     <form onSubmit={handleSubmit}>\r\n//         <input type=\"text\" placeholder='Enter title' ref={title}/>\r\n//         <input type=\"text\" placeholder='Enter discription' ref={discription}/>\r\n//         <input id=\"image-input\" type=\"file\" accept=\"image/*\" multiple ref={images} />\r\n//         <button id=\"submit-button\" onClick={addimage}>Submit</button>\r\n//         <input type=\"submit\" /> \r\n//         { eventupdate &&  <h2 style={{color:'green'}} >{eventupdate}</h2> }\r\n        \r\n//     </form>\r\n    \r\n// </div>\r\n//   )\r\n// }\r\n\r\n// export default Allevents\r\nimport React, { useRef, useState } from 'react';\r\n\r\nfunction Allevents() {\r\n  const title = useRef();\r\n  const description = useRef();\r\n  const images = useRef();\r\n  const [eventUpdate, setEventUpdate] = useState(null);\r\n  const [newImages, setNewImages] = useState([]);\r\n\r\n  const addImages = (e) => {\r\n    e.preventDefault();\r\n\r\n    const files = images.current.files;\r\n    const maxImages = 15;\r\n\r\n    const selectedImages = Array.from(files).slice(0, maxImages);\r\n  //  selectedImages=selectedImages.map((m)=>{ return m.name})\r\n  // console.log(selectedImages[0].name);\r\n    for(let i=0;i<selectedImages.length;i++)\r\n\r\n    console.log(selectedImages);\r\n\r\n    setNewImages(selectedImages);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newEvent = {\r\n      title: title.current.value,\r\n      description: description.current.value,\r\n      images: newImages,\r\n    };\r\n\r\n    fetch('http://localhost:4000/events', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(newEvent),\r\n    })\r\n      .then(() => {\r\n        setEventUpdate('New event added successfully');\r\n      })\r\n      .catch(() => {\r\n        setEventUpdate('Failed to add event. Please try again.');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"addevents\">\r\n      <h4>Add new event here</h4>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" placeholder=\"Enter title\" ref={title} />\r\n        <input type=\"text\" placeholder=\"Enter description\" ref={description} />\r\n        <input id=\"image-input\" type=\"file\" accept=\"image/*\" multiple ref={images}  />\r\n        <button onClick={addImages}>Add Images</button>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n        {eventUpdate && <h2 style={{ color: 'green' }}>{eventUpdate}</h2>}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Allevents;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}